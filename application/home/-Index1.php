<?php
/**
 * Created by PhpStorm.
 * User: 65998
 * Date: 2018/5/17
 * Time: 10:51
 */

namespace app\home\controller;


use app\model\Category;
use app\model\Comment;
use app\model\Likes;
use app\model\Video;
use think\cache\driver\Redis;
use think\Controller;
use think\Db;
use think\facade\Cookie;
use think\facade\Request;

class Indexdsfdsfdsf extends Base {
    public $alias      = '';
    public $cache_time = 60;
    static $redis      = '';

    /**
     * 构造函数
     * @throws \think\db\exception\BindParamException
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * @throws \think\exception\PDOException
     */
    public function initialize() {
        parent::initialize(); // TODO: Change the autogenerated stub
        self::$redis = new Redis();

        //获取频道信息
        $sql     = Category::fetchSql()->field('id,name,alias')->where([
            ['status', '=', 1],
            ['parent_id', '=', 0]
        ])->order('sort')->select();
        $channel = json_decode(self::$redis->get($sql), true);
        if (!$channel) {
            $channel = Category::query($sql);
            self::$redis->set($sql, json_encode($channel), $this->cache_time);
        }

        //获取当前频道别名
        $alias       = strtolower(Request::controller());
        $this->alias = $alias;

        //获取当前频道ID
        $sql    = Category::fetchSql()->where('alias', $alias)->value('id');
        self::$redis->rm($sql);
        $cat_id = self::$redis->get($sql);
        if (!$cat_id) {
            $cat_id = Category::where('alias', $alias)->value('id');
            self::$redis->set($sql, $cat_id, $this->cache_time);
        }


        //获取当前频道下的小分类
        $sql  = Category::fetchSql()->where('parent_id', $cat_id)->select();
        $cats = json_decode(self::$redis->get($sql), true);
        if (!$cats) {
            $cats = Category::where('parent_id', $cat_id)->select();
            self::$redis->set($sql, json_encode($cats), $this->cache_time);
        }


        //当前频道下前三个子类排行前十视频
        if (Request::action() == 'play' || Request::action() == 'detail') {
            foreach ($cats as $k => $v) {
                if ($k < 3) {
                    $sql  = Video::fetchSql()->field('id,title,score')->where([
                        ['tags', 'like', '%' . $v['name'] . '%'],
                        ['status', '=', 1]
                    ])->order('score desc')->limit(10)->select();
                    $list = json_decode(self::$redis->get($sql), true);
                    if (!$list) {
                        $list = Video::query($sql);
                        self::$redis->set($sql, json_encode($list), $this->cache_time);
                    }
                    if ($list) {
                        $catlist[$k]         = $v;
                        $catlist[$k]['data'] = $list;
                        unset($list);
                    }
                }
            }
            $this->assign(['rightTop' => $catlist]);
        }

        $this->assign('channel', $channel);
        $this->assign('action', strtolower(Request::action()));
        $this->assign('alias', $alias);
        $this->assign('cats', $cats);
    }


    //首页操作
    public function index() {
        //视频列表
        $sql    = Video::fetchSql()->field('id,title,thumb,tags,score,channel')->where([
            ['channel', '=', 'shipin'],
            ['status', '=', 1]
        ])->order('id desc')->limit(17)->select();
        $shipin = json_decode(self::$redis->get($sql), true);
        if (!$shipin) {
            $shipin = Video::query($sql);
            self::$redis->set($sql, json_encode($shipin), $this->cache_time);
        }

        //视频排行榜
        $sql   = Video::fetchSql()->field('id,title,thumb,tags,score,channel')->where([
            ['channel', '=', 'shipin'],
            ['status', '=', 1]
        ])->order('score desc')->limit(13)->select();
        $spphb = json_decode(self::$redis->get($sql), true);
        if (!$spphb) {
            $spphb = Video::query($sql);
            self::$redis->set($sql, json_encode($spphb), $this->cache_time);
        }

        //下载列表
        $sql    = Video::fetchSql()->field('id,title,thumb,tags,score,channel')->where([
            ['channel', '=', 'xiazai'],
            ['status', '=', 1]
        ])->order('id desc')->limit(18)->select();
        $xiazai = json_decode(self::$redis->get($sql), true);
        if (!$xiazai) {
            $xiazai = Video::query($sql);
            self::$redis->set($sql, json_encode($xiazai), $this->cache_time);
        }

        //美女列表
        $sql   = Video::fetchSql()->field('id,title,thumb,tags,score,channel')->where([
            ['channel', '=', 'meinv'],
            ['status', '=', 1]
        ])->order('id desc')->limit(12)->select();
        $meinv = json_decode(self::$redis->get($sql), true);
        if (!$meinv) {
            $meinv = Video::query($sql);
            self::$redis->set($sql, json_encode($meinv), $this->cache_time);
        }


        //图片列表
        $sql    = Video::fetchSql()->field('id,title,thumb,tags,score,channel')->where([
            ['channel', '=', 'tupian'],
            ['status', '=', 1]
        ])->order('id desc')->limit(12)->select();
        $tupian = json_decode(self::$redis->get($sql), true);
        if (!$tupian) {
            $tupian = Video::query($sql);
            self::$redis->set($sql, json_encode($tupian), $this->cache_time);
        }

        //小说列表
        $sql      = Video::fetchSql()->field('id,title,tags,score,channel')->where([
            ['channel', '=', 'xiaoshuo'],
            ['status', '=', 1]
        ])->order('id desc')->limit(16)->select();
        $xiaoshuo = json_decode(self::$redis->get($sql), true);
        if (!$xiaoshuo) {
            $xiaoshuo = Video::query($sql);
            self::$redis->set($sql, json_encode($xiaoshuo), $this->cache_time);
        }

        //有声列表
        $sql      = Video::fetchSql()->field('id,title,tags,score,channel')->where([
            ['channel', '=', 'mp3'],
            ['status', '=', 1]
        ])->order('id desc')->limit(16)->select();
        $yousheng = json_decode(self::$redis->get($sql), true);
        if (!$yousheng) {
            $yousheng = Video::query($sql);
            self::$redis->set($sql, json_encode($yousheng), $this->cache_time);
        }

        $this->assign([
            'shipin'   => $shipin,
            'spphb'    => $spphb,
            'xiazai'   => $xiazai,
            'meinv'    => $meinv,
            'tupian'   => $tupian,
            'xiaoshuo' => $xiaoshuo,
            'yousheng' => $yousheng
        ]);

        $seo = [
            'title'       => config('web_site_title') . '-' . config('web_site_slogan'),
            'keywords'    => config('web_site_keywords'),
            'description' => config('web_site_description')
        ];

        $this->assign($seo);
        $this->assign('is_open', Cookie('is_open') ?: 0);
        Cookie::set('is_open', 1, 600);

        return $this->fetch('home');
    }

    //列表操作
    public function lists() {
        //有声小说列表
        if (strtolower(Request::controller()) == 'mp3') {
            $sql  = Category::fetchSql()->where('parent_id', 5)->paginate(18);
            $list = json_decode(self::$redis->get($sql), true);
            if (!$list) {
                $list = Category::query($sql);
                self::$redis->set($sql, json_encode($list), $this->cache_time);
            }

            //其他频道内容列表
        } else {
            $order   = input('order/s') ?: 'insert_time';
            $cat     = input('name/s') ?: 'all';
            $where[] = ['status', '=', 1];
            $where[] = ['channel', '=', $this->alias];
            if ($this->alias == 'shipin' && $cat == '成人动漫') {
                ($cat != 'all' && $cat) && $where[] = ['tags', 'like', "%动漫%"];
            } else {
                ($cat != 'all' && $cat) && $where[] = ['tags', 'like', "%$cat%"];
            }

            //列表内容
            $sql  = Video::fetchSql()->field('id,title,thumb,tags,score,channel')->where($where)->order("$order desc")->paginate(18);
            $list = json_decode(self::$redis->get($sql), true);
            if (!$list) {
                $list = Video::query($sql);
                self::$redis->set($sql, json_encode($list), $this->cache_time);
            }

            //SEO内容
            $sql   = Category::fetchSql()->where('alias', $this->alias)->value('name');
            $title = self::$redis->get($sql);
            if (!$title) {
                $title = Video::query($sql);
                self::$redis->set($sql, $title, $this->cache_time);
            }
            $cat && $subTitle = '-' . $cat;
            $seo = [
                'title'       => $title . $subTitle . '-' . config('web_site_title'),
                'keywords'    => $title . $subTitle . '-' . config('web_site_title'),
                'description' => $title . $subTitle . '-' . config('web_site_title'),
            ];

            $this->assign($seo);
            $this->assign(['cat' => $cat, 'order' => $order]);
        }

        $this->assign('list', $list);
        return $this->fetch('/index/list');
    }

    //有声小说二级列表
    public function mp3list() {
        $order   = input('order/s') ?: 'insert_time';
        $id      = input('id/d') ?: 'all';
        $where[] = ['status', '=', 1];
        $id && $where[] = ['cat_id', '=', $id];

        $sql  = Video::fetchSql()->field('id,title,tags,score,channel')->where($where)->order("$order desc")->paginate(18);
        $list = json_decode(self::$redis->get($sql), true);
        if (!$list) {
            $list = Video::query($sql);
            self::$redis->set($sql, json_encode($list));
        }
        $this->assign(['id' => $id, 'order' => $order]);

        $title = Category::where('id', $id)->value('name');
        $seo   = [
            'title'       => $title . '-' . config('web_site_title'),
            'keywords'    => $title . '-' . config('web_site_title'),
            'description' => $title . '-' . config('web_site_title'),
        ];

        $this->assign($seo);
        $this->assign('list', $list);
        return $this->fetch('/index/mp3list');
    }

    //搜索操作
    public function search() {
        $title   = input('kw/s');
        $order   = input('order/s') ?: 'insert_time';
        $where[] = ['status', '=', 1];
        $where[] = ['channel', '<>', 'xiaoshuo'];
        $where[] = ['channel', '<>', 'mp3'];
        $title && $where[] = ['title', 'like', "%$title%"];

        $sql  = Video::fetchSql()->field('id,cat_id,title,thumb,tags,score,channel')->where($where)->order("$order desc")->paginate(18, false, ['query' => input()]);
        $list = json_decode(self::$redis->get($sql), true);
        if (!$list) {
            $list = Video::query($sql);
            self::$redis->set($sql, json_encode($list));
        }

        $seo = [
            'title'       => $title . '-' . config('web_site_title'),
            'keywords'    => $title . '-' . config('web_site_title'),
            'description' => $title . '-' . config('web_site_title'),
        ];

        $this->assign($seo);
        $this->assign(['order' => $order]);
        $this->assign('list', $list);
        $this->assign('kw', $title);
        return $this->fetch();
    }

    public function newList() {
        return $this->fetch();
    }

    public function topList() {
        return $this->fetch();
    }

    public function test() {
        return $this->fetch();
    }


    /**
     * 点赞
     */
    public function clickGood() {
        $id = input('id/d');
        if (time() - session("good_time_$id") < 600 && session("good_time_$id") > 0) {//2分钟以后发布
            $this->error("您点赞的速度太快了，请" . (600 - (time() - session("good_time_$id"))) . "秒后再来。");
        }

        $id || $this->error('缺少参数[id]');
        Video::where('id', $id)->setInc('good');
        session("good_time_$id", time());

        $this->success('点赞成功');
    }

    /**
     * 提交收藏
     */
    public function addFav() {
        $vid     = input('id/d');
        $user    = session('user');
        $user_id = $user['id'];
        if (!$vid) {
            $this->error('缺少参数');
        }
        if (!$user_id) {
            $this->error('您还未登陆！请登陆后在执行此操作~');

        }
        $row = Video::field('title,channel')->where('id', $vid)->find();
        if (!$row) {
            $this->error('操作失败，请重试~');
        }
        $where[] = ['user_id', '=', $user_id];
        $where[] = ['vid', '=', $vid];
        if (Likes::where($where)->value('id')) {
            $this->error('您已收藏过此内容，请勿重复收藏~');
        }
        Db::startTrans();
        try {
            $data = [
                'vid'         => $vid,
                'title'       => $row['title'],
                'user_id'     => $user_id,
                'nickname'    => $user->nickname,
                'channel'     => $row['channel'],
                'insert_time' => time()
            ];
            Likes::insert($data);
            Video::where('id', $vid)->setInc('like');
            Db::commit();
        } catch (\Exception $e) {
            Db::rollback();
            $this->error('操作失败，请重试~');
        }

        $this->success('收藏成功~');
    }

    /**
     * 评论点赞
     */
    public function cmtGoodInc() {
        $id = input('id/d');
        if (time() - session("good_inc_$id") < 600 && session("good_inc_$id") > 0) {//2分钟以后发布
            $this->error('您点赞的速度太快了，请稍后再点击~。');
        }

        $id || $this->error('缺少参数[id]');
        Comment::where('id', $id)->setInc('good');
        session("good_inc_$id", time());

        $this->success('点赞成功');
    }

    /**
     * 评论
     * @return array
     * @throws \think\Exception
     *
     */
    public function postComment() {
        $user = session('user');
        if (!$user) {
            if (session('test_user')) {
                $user = session('test_user');
            } else {
                $ip   = get_client_ip();
                $ext  = substr($ip, strrpos($ip, '.') + 1);
                $ip   = str_replace($ext, '***', $ip);
                $user = ['nickname' => '游客[' . $ip . ']', 'id' => 0];
                session('test_user', $user);
            }
        }
        $vid         = input('id/d');
        $user_id     = $user['id'];
        $data['uid'] = $user_id;
        $data['vid'] = $vid; //文章id
        $data['vid'] || $this->error('缺少参数[vid]');
        $content = addslashes(str_replace("\n", "<br />", input('content')));
        strlen($content) < 5 && $this->error('评论的内容不能少于10个字符。');

        if (time() - session("comment_time_$vid") < 120 && session("comment_time_$vid") > 0) {//2分钟以后发布
            $this->error('您提交评论的速度太快了，请稍后再发表评论。');
        }

        $data['parent_id']   = input("post.pid", 0, 'int');
        $data['to_uid']      = input("post.to_uid", 0, 'int');
        $data['nickname']    = $user['nickname'];
        $data['to_name']     = input('to_name');
        $data['status']      = 0;
        $data['insert_time'] = time();
        $data['content']     = $content;


        $lastid = Comment::insertGetId($data);

        if ($lastid > 0) {
            Video::where('id', $data['vid'])->setInc('comments', 1);
        }
        $log = 'userid_' . $user_id . '-' . thisHost() . '-time_' . time() . '-content_' . $content . "\n";
        file_put_contents('./log.log', $log, FILE_APPEND);
        session("comment_time_$vid", time());
        $this->success('评论成功，待审核');
    }

    /**
     * 获取当前文章下的评论
     */
    public function comments() {
        $id = input('id/d');

        $id || $this->error('缺少参数[id]');
        $where[] = ['status', '=', 1];
        $where[] = ['parent_id', '=', 0];
        $where[] = ['vid', '=', $id];
        $count   = Comment::where($where)->count();
        $comment = Comment::field('*')->where($where)->order('insert_time desc')->paginate(10, $count, ['query' => input()]);

        $html = '';
        foreach ($comment as $k => $v) {
            (600 - (time() - session("good_time_" . $v['id']))) || $class = 'active';
            $comments[$k] = $v;
            $list         = Comment::getLists($v['id'], $id);
            count($list) && $style = "style='margin-top:10px'";
            $html .= '<div class="comments__list ng-star-inserted">';
            $html .= '<div class="comment__wrap">';
            $html .= '<div class="comment">';
            $html .= '<div class="comment_user_content">';
            $html .= '<div class="comment_user_img" style="background-image:url(\'/home/img/person.svg\');"></div>';
            $html .= '</div>';
            $html .= '<div class="comment_content">';
            $html .= '<div class="comment__header">';
            $html .= '<span class="theme-color">' . $v['nickname'] . '</span>';
            $html .= '<span class="rate-video__button-coment colorClass rate-video-comment-bad float-right good-inc ' . $class . '" data-id="' . $v['id'] . '"></span>';
            $html .= '<span class="font-size-12 float-right good-add" id="good-num' . $v['id'] . '">' . ($v['good'] ?: '') . '</span>';
            $html .= '</div>';
            $html .= '<div class="example-child child_' . $v['id'] . '">';
            $html .= $this->getChildComment($list, $v['id']);
            $html .= '</div>';
            $html .= '<div class="comment__body" ' . $style . '>';
            $html .= '<p>' . $v['content'] . '</p>';
            $html .= '</div>';
            $html .= '<div class="comment__footer">';
            $html .= '<span class="font-size-12">' . date('Y-m-d H:i:s', $v['insert_time']) . '</span>';
            $html .= '<a class="comment__reply" pid="' . $v['id'] . '" nickname="' . $v['nickname'] . '" href="#post_content">回复</a>';
            $html .= '</div>';
            $html .= '</div>';
            $html .= '</div>';
            $html .= '</div>';
            $html .= '</div>';
            unset($list);
        }

        $temp = '<link href="/home/css/comments.css" rel="stylesheet" type="text/css"/>
            <div id="post_content">
                <textarea name="content" class="content" id="content" placeholder="吐个槽..."></textarea>
                <button type="button" class="btn btn-block btn-warning post_comment">提&nbsp;&nbsp;&nbsp;交</button>
            </div>
            <div class="comment_list_group">';

        if ($html) {
            $temp .= $html;
        } else {
            $temp .= '<div class="comment__body1" id="border-gai0"><div class="commet_color"> 暂无评论</div></div>';
        }

        $temp .= '</div><div class="hy-page clearfix">' . $comment->renders() . '</div><style>.hy-page .hidden-xs{display: none;}.hy-page .visible-xs{display: inline-block!important;}</style><script src="/home/js/comments.js"></script>';

        echo $temp;
    }

    /**
     *  把temp_arr数组中保存的引用评论信息转换为html形式
     */
    function getChildComment($temp_arr, $pid) {
        $htmlStr = $hideStr = '';
        if (!is_array($temp_arr) || empty($temp_arr)) {
            return '';
        }
        $num    = count($temp_arr);
        $button = '<div class="comment_content1 border-gai3 show_tmp" id="' . $pid . '">
                       <div class="comment__body1" id="border-gai0">
                            <div class="commet_color"> 点开隐藏楼层</div>
                         </div>
                     </div>';

        $hideStrs = '<div style="display:none" class="tmp_' . $pid . '">';
        foreach ($temp_arr as $k => $v) {
            (600 - (time() - session("good_time_" . $v['id']))) || $class = 'active';
            if ($num > 5) {
                if ($k < 5) {
                    $html = '<div class="comment comment--reply border-gai border-gai30 child-' . $k . '">';
                    $html .= $k == 4 ? $htmlStr . $button : $htmlStr;
                    if ($k < 4) {
                        $html .= '<div class="comment_content1">';
                        $html .= '<div class="comment__header">';
                        $html .= '<div class="leftx-a">';
                        $html .= '<a>' . ($k + 1) . '</a>&nbsp;&nbsp;' . $v['nickname'];
                        $html .= '</div>';
                        $html .= '<div class="rightx-a">';
                        $html .= '<a id="good-num' . $v['id'] . '">' . ($v['good'] ?: '') . '</a>';
                        $html .= '<div class="rate-video__button-coment colorClass rate-video-comment-bad good-inc ' . $class . '" data-id="' . $v['id'] . '"></div>';
                        $html .= '</div>';
                        $html .= '</div>';
                        $html .= '<div class="comment__body">';
                        $html .= '<p>' . $v['content'] . '<br></p>';
                        $html .= '</div>';
                        $html .= '</div>';
                    }
                    $html .= '</div>';

                    $htmlStr = $html;
                }

                $hide    = '<div class="comment comment--reply border-gai border-gai30 ">';
                $hide    .= $hideStr;
                $hide    .= '<div class="comment_content1">';
                $hide    .= '<div class="comment__header">';
                $hide    .= '<div class="leftx-a">';
                $hide    .= '<a>' . ($k + 1) . '</a>&nbsp;&nbsp;' . $v['nickname'];
                $hide    .= '</div>';
                $hide    .= '<div class="rightx-a">';
                $hide    .= '<a id="good-num' . $v['id'] . '">' . ($v['good'] ?: '') . '</a>';
                $hide    .= '<div class="rate-video__button-coment colorClass rate-video-comment-bad good-inc ' . $class . '"  data-id="' . $v['id'] . '"></div>';
                $hide    .= '</div>';
                $hide    .= '</div>';
                $hide    .= '<div class="comment__body">';
                $hide    .= '<p>' . $v['content'] . '<br></p>';
                $hide    .= '</div>';
                $hide    .= '</div>';
                $hide    .= '</div>';
                $hideStr = $hide;

            } else {
                $html    = '<div class="comment comment--reply border-gai border-gai30 child-' . $k . '">';
                $html    .= $htmlStr;
                $html    .= '<div class="comment_content1">';
                $html    .= '<div class="comment__header">';
                $html    .= '<div class="leftx-a">';
                $html    .= '<a>' . ($k + 1) . '</a>&nbsp;&nbsp;' . $v['nickname'];
                $html    .= '</div>';
                $html    .= '<div class="rightx-a">';
                $html    .= '<a id="good-num' . $v['id'] . '">' . ($v['good'] ?: '') . '</a>';
                $html    .= '<div class="rate-video__button-coment colorClass rate-video-comment-bad good-inc ' . $class . '"  data-id="' . $v['id'] . '"></div>';
                $html    .= '</div>';
                $html    .= '</div>';
                $html    .= '<div class="comment__body">';
                $html    .= '<p>' . $v['content'] . '<br></p>';
                $html    .= '</div>';
                $html    .= '</div>';
                $html    .= '</div>';
                $htmlStr = $html;
            }

        }
        $hideStrs .= $hideStr . '</div>';
        return $htmlStr . $hideStrs;
    }
}