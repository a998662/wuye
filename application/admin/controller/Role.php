<?php
/**
 * Created by PhpStorm.
 * User: 胡卫兵 <659998662@qq.com>
 * Date: 2017/3/11
 * Time: 22:47
 */

namespace app\admin\controller;

use app\model\Role as RoleModel;
use app\model\Menu as MenuModel;
use think\Db;
use util\Tree;

class Role extends Init
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $roles = RoleModel::select();
        $this->assign('role', $roles);
    }

    /**
     * 角色列表
     */
    public function index()
    {
        return $this->fetch();
    }

    //添加角色
    public function add(){
        //入库操作
        if (isAjax()) {
            $data = input('post.');
            $code = RoleModel::insertGetId($data);
            $msg = $code ? '添加成功' : '添加失败';
            return ['code' => $code, 'msg' => $msg];
        }
        // 菜单列表
        $menus = cache('access_menus');
        if (!$menus) {
            $modules = db('module')->where('status', 1)->column('name');
            $menus = MenuModel::where('module', 'in', $modules)->order('sort,id')->column('id,parent_id,sort,name as title,icon');
            $menus = Tree::toLayer($menus);
            $menus = $this->buildJsTree($menus);

            // 非开发模式，缓存菜单
            if (config('develop_mode') == 0) {
                cache('access_menus', $menus);
            }
        }
        $this->assign('menus', $menus);
        return $this->fetch('info');
    }

    //编辑角色
    public function edit()
    {
        //入库操作
        if (isAjax()) {
            $data = input('post.');
            $code = RoleModel::update($data);
            $msg = $code ? '编辑成功' : '编辑失败';
            return ['code' => $code, 'msg' => $msg, 'url'=>url('/role/index')];
        }

        // 菜单列表


        $modules = Db::name('module')->where('status', 1)->column('name');
        $menus = MenuModel::where('module', 'in', $modules)->order('sort,id')->column('id,parent_id,sort,name as title,icon');
        $menus = Tree::toLayer($menus);
        $nodes = RoleModel::where(['id'=>input('id')])->value('nodes');
        $menus = $this->buildJsTree($menus,explode(',',$nodes));
        //print_r($menus);return;
        $info = RoleModel::find(input('id'));


        $this->assign('info', $info);
        $this->assign('menus', $menus);
        return $this->fetch('info');
    }

    /**
     * 构建jstree代码
     * @param array $menus 菜单节点
     * @param array $user 用户信息
     * @author 胡卫兵 <659998662@qq.com>
     * @return string
     */
    private function buildJsTree($menus = [], $nodes = [])
    {
        $result = '';
        if (!empty($menus)) {
            $option = [
                'opened'   => true,
                'selected' => false,
                'icon'     => '',
            ];
            foreach ($menus as $menu) {
                $option['icon'] = $menu['icon'];
                if (isset($nodes)) {
                    $option['selected'] = in_array($menu['id'],$nodes) ? true : false;
                }
                if (isset($menu['child'])) {
                    $result .= '<li id="'.$menu['id'].'" data-jstree=\''.json_encode($option).'\'>'.$menu['title'].($menu['url'] == '' ? '' : ' ('.$menu['url'].')').$this->buildJsTree($menu['child'], $nodes).'</li>';
                } else {
                    $result .= '<li id="'.$menu['id'].'" data-jstree=\''.json_encode($option).'\'>'.$menu['title'].($menu['url'] == '' ? '' : ' ('.$menu['url'].')').'</li>';
                }
            }
        }

        return '<ul>'.$result.'</ul>';
    }


    /**
     * 获取嵌套式节点
     * @param array $lists 原始节点数组
     * @param int $parent_id 父级id
     * @param int $max_level 最多返回多少层，0为不限制
     * @param int $curr_level 当前层数
     * @author 胡卫兵 <659998662@qq.com>
     * @return string
     */
    private function getNestRole($lists = [])
    {
        $result = '';
        foreach ($lists as $key => $v) {
            if($v['parent_id'] == 0)
            $result .=
                '<div class="block block-bordered">
                    <div class="block-header bg-gray-lighter auth-node-top">
                        <label class="css-input css-checkbox css-checkbox-primary">
                            <input name="menu_auth[]" value="'.$v['id'].'" class="js-check-all-node" type="checkbox"><span></span> <i class="'.$v['icon'].'"></i> '.$v['name'].'
                        </label>
                    </div>                   
                    <div class="block-content">';
                foreach ($v as $v1){
                    $result .=
                        '<div class="auth-node-child">
                                <div class="auth-node-row">
                                    <label class="css-input css-checkbox css-checkbox-primary">
                                        <input name="menu_auth[]" data-parent-id="5" value="6" class="js-check-all-row" type="checkbox"><span></span> <i class="fa fa-fw fa-wrench"></i> 系统设置
                                    </label>
                                </div>';
                    foreach ($v1 as $v2){
                        $result .=
                            '<div class="auth-node-row">
                                <label class="css-input css-checkbox css-checkbox-primary">
                                    <input name="menu_auth[]" data-parent-id="5" value="7" class="js-check-all-row" type="checkbox"><span></span> <i class="fa fa-fw fa-gears"></i> 配置管理
                                </label>
                                <div class="auth-node-child">';
                        foreach ($v2 as $v3){
                            $result .=
                                '<label class="css-input css-checkbox css-checkbox-primary push-10-r">
                                    <input name="menu_auth[]" data-parent-id="7" value="8" type="checkbox"><span></span> 新增
                                </label>';
                        }
                        $result .= '</div></div>';
                    }

                    $result .= '</div></div>';
                }

            $result .= '</div></div>';
        }
        return $result;
    }
}